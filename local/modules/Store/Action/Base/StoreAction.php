<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace Store\Action\Base;

use Store\Model\Map\StoreTableMap;
use Store\Event\StoreEvent;
use Store\Event\StoreEvents;
use Store\Model\StoreQuery;
use Store\Model\Store;
use Thelia\Action\BaseAction;
use Thelia\Core\Event\ToggleVisibilityEvent;
use Thelia\Core\Event\UpdatePositionEvent;
use Propel\Runtime\Propel;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Thelia\Core\Event\TheliaEvents;
use \Thelia\Core\Event\TheliaFormEvent;

/**
 * Class StoreAction
 * @package Store\Action
 * @author TheliaStudio
 */
class StoreAction extends BaseAction implements EventSubscriberInterface
{
    public function create(StoreEvent $event)
    {
        $this->createOrUpdate($event, new Store());
    }

    public function update(StoreEvent $event)
    {
        $model = $this->getStore($event);

        $this->createOrUpdate($event, $model);
    }

    public function delete(StoreEvent $event)
    {
        $this->getStore($event)->delete();
    }

    protected function createOrUpdate(StoreEvent $event, Store $model)
    {
        $con = Propel::getConnection(StoreTableMap::DATABASE_NAME);
        $con->beginTransaction();

        try {
            $model->setLocale($event->getLocale());

            if (null !== $id = $event->getId()) {
                $model->setId($id);
            }

            if (null !== $visible = $event->getVisible()) {
                $model->setVisible($visible);
            }

            if (null !== $position = $event->getPosition()) {
                $model->setPosition($position);
            }

            if (null !== $title = $event->getTitle()) {
                $model->setTitle($title);
            }

            if (null !== $description = $event->getDescription()) {
                $model->setDescription($description);
            }

            if (null !== $adminId = $event->getAdminId()) {
                $model->setAdminId($adminId);
            }

            if (null !== $company = $event->getCompany()) {
                $model->setCompany($company);
            }

            if (null !== $firstname = $event->getFirstname()) {
                $model->setFirstname($firstname);
            }

            if (null !== $lastname = $event->getLastname()) {
                $model->setLastname($lastname);
            }

            if (null !== $address1 = $event->getAddress1()) {
                $model->setAddress1($address1);
            }

            if (null !== $address2 = $event->getAddress2()) {
                $model->setAddress2($address2);
            }

            if (null !== $address3 = $event->getAddress3()) {
                $model->setAddress3($address3);
            }

            if (null !== $zipcode = $event->getZipcode()) {
                $model->setZipcode($zipcode);
            }

            if (null !== $city = $event->getCity()) {
                $model->setCity($city);
            }

            if (null !== $phone = $event->getPhone()) {
                $model->setPhone($phone);
            }

            if (null !== $cellphone = $event->getCellphone()) {
                $model->setCellphone($cellphone);
            }

            if (null !== $vatNumber = $event->getVatNumber()) {
                $model->setVatNumber($vatNumber);
            }

            if (null !== $lat = $event->getLat()) {
                $model->setLat($lat);
            }

            if (null !== $lng = $event->getLng()) {
                $model->setLng($lng);
            }

            $model->save($con);

            $con->commit();
        } catch (\Exception $e) {
            $con->rollback();

            throw $e;
        }

        $event->setStore($model);
    }

    protected function getStore(StoreEvent $event)
    {
        $model = StoreQuery::create()->findPk($event->getId());

        if (null === $model) {
            throw new \RuntimeException(sprintf(
                "The 'store' id '%d' doesn't exist",
                $event->getId()
            ));
        }

        return $model;
    }

    public function updatePosition(UpdatePositionEvent $event)
    {
        $this->genericUpdatePosition(new StoreQuery(), $event);
    }

    public function toggleVisibility(ToggleVisibilityEvent $event)
    {
        $this->genericToggleVisibility(new StoreQuery(), $event);
    }

    public function beforeCreateFormBuild(TheliaFormEvent $event)
    {
    }

    public function beforeUpdateFormBuild(TheliaFormEvent $event)
    {
    }

    public function afterCreateFormBuild(TheliaFormEvent $event)
    {
    }

    public function afterUpdateFormBuild(TheliaFormEvent $event)
    {
    }

    /**
     * Returns an array of event names this subscriber wants to listen to.
     *
     * The array keys are event names and the value can be:
     *
     *  * The method name to call (priority defaults to 0)
     *  * An array composed of the method name to call and the priority
     *  * An array of arrays composed of the method names to call and respective
     *    priorities, or 0 if unset
     *
     * For instance:
     *
     *  * array('eventName' => 'methodName')
     *  * array('eventName' => array('methodName', $priority))
     *  * array('eventName' => array(array('methodName1', $priority), array('methodName2'))
     *
     * @return array The event names to listen to
     *
     * @api
     */
    public static function getSubscribedEvents()
    {
        return array(
            StoreEvents::CREATE => array("create", 128),
            StoreEvents::UPDATE => array("update", 128),
            StoreEvents::DELETE => array("delete", 128),
            StoreEvents::UPDATE_POSITION => array("updatePosition", 128),
            StoreEvents::TOGGLE_VISIBILITY => array("toggleVisibility", 128),
            TheliaEvents::FORM_BEFORE_BUILD . ".store_create" => array("beforeCreateFormBuild", 128),
            TheliaEvents::FORM_BEFORE_BUILD . ".store_update" => array("beforeUpdateFormBuild", 128),
            TheliaEvents::FORM_AFTER_BUILD . ".store_create" => array("afterCreateFormBuild", 128),
            TheliaEvents::FORM_AFTER_BUILD . ".store_update" => array("afterUpdateFormBuild", 128),
        );
    }
}
