<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace Store\Loop\Base;

use Propel\Runtime\ActiveQuery\Criteria;
use Thelia\Core\Template\Element\BaseI18nLoop;
use Thelia\Core\Template\Element\LoopResult;
use Thelia\Core\Template\Element\LoopResultRow;
use Thelia\Core\Template\Element\PropelSearchLoopInterface;
use Thelia\Core\Template\Loop\Argument\Argument;
use Thelia\Core\Template\Loop\Argument\ArgumentCollection;
use Thelia\Type\BooleanOrBothType;
use Store\Model\StoreQuery;

/**
 * Class Store
 * @package Store\Loop\Base
 * @author TheliaStudio
 */
class Store extends BaseI18nLoop implements PropelSearchLoopInterface
{
    protected $timestampable = true;
    protected $versionable = true;

    /**
     * @param LoopResult $loopResult
     *
     * @return LoopResult
     */
    public function parseResults(LoopResult $loopResult)
    {
        /** @var \Store\Model\Store $entry */
        foreach ($loopResult->getResultDataCollection() as $entry) {
            $row = new LoopResultRow($entry);

            $row
                ->set("ID", $entry->getId())
                ->set("VISIBLE", $entry->getVisible())
                ->set("POSITION", $entry->getPosition())
                ->set("TITLE", $entry->getVirtualColumn("i18n_TITLE"))
                ->set("DESCRIPTION", $entry->getVirtualColumn("i18n_DESCRIPTION"))
                ->set("ADMIN_ID", $entry->getAdminId())
                ->set("COMPANY", $entry->getCompany())
                ->set("FIRSTNAME", $entry->getFirstname())
                ->set("LASTNAME", $entry->getLastname())
                ->set("ADDRESS1", $entry->getAddress1())
                ->set("ADDRESS2", $entry->getAddress2())
                ->set("ADDRESS3", $entry->getAddress3())
                ->set("ZIPCODE", $entry->getZipcode())
                ->set("CITY", $entry->getCity())
                ->set("PHONE", $entry->getPhone())
                ->set("CELLPHONE", $entry->getCellphone())
                ->set("VAT_NUMBER", $entry->getVatNumber())
                ->set("LAT", $entry->getLat())
                ->set("LNG", $entry->getLng())
            ;

            $this->addMoreResults($row, $entry);

            $loopResult->addRow($row);
        }

        return $loopResult;
    }

    /**
     * Definition of loop arguments
     *
     * example :
     *
     * public function getArgDefinitions()
     * {
     *  return new ArgumentCollection(
     *
     *       Argument::createIntListTypeArgument('id'),
     *           new Argument(
     *           'ref',
     *           new TypeCollection(
     *               new Type\AlphaNumStringListType()
     *           )
     *       ),
     *       Argument::createIntListTypeArgument('category'),
     *       Argument::createBooleanTypeArgument('new'),
     *       ...
     *   );
     * }
     *
     * @return \Thelia\Core\Template\Loop\Argument\ArgumentCollection
     */
    protected function getArgDefinitions()
    {
        return new ArgumentCollection(
            Argument::createIntListTypeArgument("id"),
            Argument::createBooleanOrBothTypeArgument("visible", BooleanOrBothType::ANY),
            Argument::createIntListTypeArgument("position"),
            Argument::createAnyTypeArgument("title"),
            Argument::createIntListTypeArgument("admin_id"),
            Argument::createAnyTypeArgument("company"),
            Argument::createAnyTypeArgument("firstname"),
            Argument::createAnyTypeArgument("lastname"),
            Argument::createAnyTypeArgument("address1"),
            Argument::createAnyTypeArgument("address2"),
            Argument::createAnyTypeArgument("address3"),
            Argument::createAnyTypeArgument("zipcode"),
            Argument::createAnyTypeArgument("city"),
            Argument::createAnyTypeArgument("phone"),
            Argument::createAnyTypeArgument("cellphone"),
            Argument::createAnyTypeArgument("vat_number"),
            Argument::createAnyTypeArgument("lat"),
            Argument::createAnyTypeArgument("lng"),
            Argument::createEnumListTypeArgument(
                "order",
                [
                    "id",
                    "id-reverse",
                    "visible",
                    "visible-reverse",
                    "manual",
                    "manual-reverse",
                    "title",
                    "title-reverse",
                    "description",
                    "description-reverse",
                    "admin_id",
                    "admin_id-reverse",
                    "company",
                    "company-reverse",
                    "firstname",
                    "firstname-reverse",
                    "lastname",
                    "lastname-reverse",
                    "address1",
                    "address1-reverse",
                    "address2",
                    "address2-reverse",
                    "address3",
                    "address3-reverse",
                    "zipcode",
                    "zipcode-reverse",
                    "city",
                    "city-reverse",
                    "phone",
                    "phone-reverse",
                    "cellphone",
                    "cellphone-reverse",
                    "vat_number",
                    "vat_number-reverse",
                    "lat",
                    "lat-reverse",
                    "lng",
                    "lng-reverse",
                ],
                "manual"
            )
        );
    }

    /**
     * this method returns a Propel ModelCriteria
     *
     * @return \Propel\Runtime\ActiveQuery\ModelCriteria
     */
    public function buildModelCriteria()
    {
        $query = new StoreQuery();
        $this->configureI18nProcessing($query, ["TITLE", "DESCRIPTION", ]);

        if (null !== $id = $this->getId()) {
            $query->filterById($id);
        }

        if (BooleanOrBothType::ANY !== $visible = $this->getVisible()) {
            $query->filterByVisible($visible);
        }

        if (null !== $position = $this->getPosition()) {
            $query->filterByPosition($position);
        }

        if (null !== $title = $this->getTitle()) {
            $title = array_map("trim", explode(",", $title));
            $query->filterByTitle($title);
        }

        if (null !== $admin_id = $this->getAdminId()) {
            $query->filterByAdminId($admin_id);
        }

        if (null !== $company = $this->getCompany()) {
            $company = array_map("trim", explode(",", $company));
            $query->filterByCompany($company);
        }

        if (null !== $firstname = $this->getFirstname()) {
            $firstname = array_map("trim", explode(",", $firstname));
            $query->filterByFirstname($firstname);
        }

        if (null !== $lastname = $this->getLastname()) {
            $lastname = array_map("trim", explode(",", $lastname));
            $query->filterByLastname($lastname);
        }

        if (null !== $address1 = $this->getAddress1()) {
            $address1 = array_map("trim", explode(",", $address1));
            $query->filterByAddress1($address1);
        }

        if (null !== $address2 = $this->getAddress2()) {
            $address2 = array_map("trim", explode(",", $address2));
            $query->filterByAddress2($address2);
        }

        if (null !== $address3 = $this->getAddress3()) {
            $address3 = array_map("trim", explode(",", $address3));
            $query->filterByAddress3($address3);
        }

        if (null !== $zipcode = $this->getZipcode()) {
            $zipcode = array_map("trim", explode(",", $zipcode));
            $query->filterByZipcode($zipcode);
        }

        if (null !== $city = $this->getCity()) {
            $city = array_map("trim", explode(",", $city));
            $query->filterByCity($city);
        }

        if (null !== $phone = $this->getPhone()) {
            $phone = array_map("trim", explode(",", $phone));
            $query->filterByPhone($phone);
        }

        if (null !== $cellphone = $this->getCellphone()) {
            $cellphone = array_map("trim", explode(",", $cellphone));
            $query->filterByCellphone($cellphone);
        }

        if (null !== $vat_number = $this->getVatNumber()) {
            $vat_number = array_map("trim", explode(",", $vat_number));
            $query->filterByVatNumber($vat_number);
        }

        if (null !== $lat = $this->getLat()) {
            $lat = array_map("trim", explode(",", $lat));
            $query->filterByLat($lat);
        }

        if (null !== $lng = $this->getLng()) {
            $lng = array_map("trim", explode(",", $lng));
            $query->filterByLng($lng);
        }

        foreach ($this->getOrder() as $order) {
            switch ($order) {
                case "id":
                    $query->orderById();
                    break;
                case "id-reverse":
                    $query->orderById(Criteria::DESC);
                    break;
                case "visible":
                    $query->orderByVisible();
                    break;
                case "visible-reverse":
                    $query->orderByVisible(Criteria::DESC);
                    break;
                case "manual":
                    $query->orderByPosition();
                    break;
                case "manual-reverse":
                    $query->orderByPosition(Criteria::DESC);
                    break;
                case "title":
                    $query->addAscendingOrderByColumn("i18n_TITLE");
                    break;
                case "title-reverse":
                    $query->addDescendingOrderByColumn("i18n_TITLE");
                    break;
                case "description":
                    $query->addAscendingOrderByColumn("i18n_DESCRIPTION");
                    break;
                case "description-reverse":
                    $query->addDescendingOrderByColumn("i18n_DESCRIPTION");
                    break;
                case "admin_id":
                    $query->orderByAdminId();
                    break;
                case "admin_id-reverse":
                    $query->orderByAdminId(Criteria::DESC);
                    break;
                case "company":
                    $query->orderByCompany();
                    break;
                case "company-reverse":
                    $query->orderByCompany(Criteria::DESC);
                    break;
                case "firstname":
                    $query->orderByFirstname();
                    break;
                case "firstname-reverse":
                    $query->orderByFirstname(Criteria::DESC);
                    break;
                case "lastname":
                    $query->orderByLastname();
                    break;
                case "lastname-reverse":
                    $query->orderByLastname(Criteria::DESC);
                    break;
                case "address1":
                    $query->orderByAddress1();
                    break;
                case "address1-reverse":
                    $query->orderByAddress1(Criteria::DESC);
                    break;
                case "address2":
                    $query->orderByAddress2();
                    break;
                case "address2-reverse":
                    $query->orderByAddress2(Criteria::DESC);
                    break;
                case "address3":
                    $query->orderByAddress3();
                    break;
                case "address3-reverse":
                    $query->orderByAddress3(Criteria::DESC);
                    break;
                case "zipcode":
                    $query->orderByZipcode();
                    break;
                case "zipcode-reverse":
                    $query->orderByZipcode(Criteria::DESC);
                    break;
                case "city":
                    $query->orderByCity();
                    break;
                case "city-reverse":
                    $query->orderByCity(Criteria::DESC);
                    break;
                case "phone":
                    $query->orderByPhone();
                    break;
                case "phone-reverse":
                    $query->orderByPhone(Criteria::DESC);
                    break;
                case "cellphone":
                    $query->orderByCellphone();
                    break;
                case "cellphone-reverse":
                    $query->orderByCellphone(Criteria::DESC);
                    break;
                case "vat_number":
                    $query->orderByVatNumber();
                    break;
                case "vat_number-reverse":
                    $query->orderByVatNumber(Criteria::DESC);
                    break;
                case "lat":
                    $query->orderByLat();
                    break;
                case "lat-reverse":
                    $query->orderByLat(Criteria::DESC);
                    break;
                case "lng":
                    $query->orderByLng();
                    break;
                case "lng-reverse":
                    $query->orderByLng(Criteria::DESC);
                    break;
            }
        }

        return $query;
    }

    protected function addMoreResults(LoopResultRow $row, $entryObject)
    {
    }
}
