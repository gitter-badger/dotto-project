<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace Store\Controller;

use Store\Controller\Base\StoreController as BaseStoreController;
use Store\Event\StoreEvent;
use Store\Event\StoreEvents;
use Store\Store;
use Thelia\Core\Security\AccessManager;
use Thelia\Core\Security\Resource\AdminResources;
use Thelia\Form\Exception\FormValidationException;

/**
 * Class StoreController
 * @package Store\Controller
 */
class StoreController extends BaseStoreController
{
    public function gpsUpdateAction()
    {

        // Check current user authorization
        if (null !== $response = $this->checkAuth(AdminResources::MODULE, Store::getModuleCode(), AccessManager::UPDATE)) {
            return $response;
        }

        // Load object if exist
        if (null !== $object = $this->getExistingObject()) {
            // Hydrate the form abd pass it to the parser
            $changeForm = $this->hydrateObjectForm($object);

            // Pass it to the parser
            $this->getParserContext()->addForm($changeForm);
        }

        return $this->render('gps-update');
    }

    public function processGpsUpdateAction()
    {
        // Check current user authorization
        if (null !== $response = $this->checkAuth(AdminResources::MODULE, Store::getModuleCode(), AccessManager::UPDATE)) {
            return $response;
        }

        // Error (Default: false)
        $error_msg = false;

        // Create the Creation Form
        $form = $this->createForm('store.gps.update');

        try {
            // Check the form against constraints violations
            $updateForm = $this->validateForm($form, "POST");

            // Get the form field values
            $data = $updateForm->getData();

            // Create a new event object with the modified fields
            $event = new  StoreEvent();
            $event
                ->setId($data['id'])
                ->setLat($data['lat'])
                ->setLng($data['lng']);

            // Dispatch Create Event
            $this->dispatch(StoreEvents::STORE_GPS_UPDATE, $event);

            // Check if object exist
            if (! $this->eventContainsObject($event)) {
                throw new \LogicException(
                    $this->getTranslator()->trans("No store was updated.")
                );
            }

            // Substitute _ID_ in the URL with the ID of the created object
            $successUrl = str_replace('_ID_', $event->getStore()->getId(), $form->getSuccessUrl());

            // Redirect to the success URL
            return $this->generateRedirect($successUrl);

        } catch (FormValidationException $ex) {
            // Form cannot be validated
            $error_msg = $this->createStandardFormValidationErrorMessage($ex);
        } catch (\Exception $ex) {
            // Any other error
            $error_msg = $ex->getMessage();
        }

        if (false !== $error_msg) {
            $this->setupFormErrorContext(
                $this->getTranslator()->trans("Store update"),
                $error_msg,
                $form,
                $ex
            );

            // At this point, the form has error, and should be redisplayed.
            return $this->render('gps-update');
        }

    }



}
