<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace Store\Controller\Base;

use Symfony\Component\HttpFoundation\RedirectResponse;
use Thelia\Controller\Admin\AbstractCrudController;
use Thelia\Core\Security\Resource\AdminResources;
use Thelia\Tools\URL;
use Store\Event\StoreEvent;
use Store\Event\StoreEvents;
use Store\Model\StoreQuery;
use Thelia\Core\Event\ToggleVisibilityEvent;
use Thelia\Core\Event\UpdatePositionEvent;

/**
 * Class StoreController
 * @package Store\Controller\Base
 * @author TheliaStudio
 */
class StoreController extends AbstractCrudController
{
    public function __construct()
    {
        parent::__construct(
            "store",
            "manual",
            "order",
            AdminResources::MODULE,
            StoreEvents::CREATE,
            StoreEvents::UPDATE,
            StoreEvents::DELETE,
            StoreEvents::TOGGLE_VISIBILITY,
            StoreEvents::UPDATE_POSITION,
            "Store"
        );
    }

    /**
     * Return the creation form for this object
     */
    protected function getCreationForm()
    {
        return $this->createForm("store.create");
    }

    /**
     * Return the update form for this object
     */
    protected function getUpdateForm($data = array())
    {
        if (!is_array($data)) {
            $data = array();
        }

        return $this->createForm("store.update", "form", $data);
    }

    /**
     * Hydrate the update form for this object, before passing it to the update template
     *
     * @param mixed $object
     */
    protected function hydrateObjectForm($object)
    {
        $data = array(
            "id" => $object->getId(),
            "visible" => (bool) $object->getVisible(),
            "position" => $object->getPosition(),
            "title" => $object->getTitle(),
            "description" => $object->getDescription(),
            "admin_id" => $object->getAdminId(),
            "company" => $object->getCompany(),
            "firstname" => $object->getFirstname(),
            "lastname" => $object->getLastname(),
            "address1" => $object->getAddress1(),
            "address2" => $object->getAddress2(),
            "address3" => $object->getAddress3(),
            "zipcode" => $object->getZipcode(),
            "city" => $object->getCity(),
            "phone" => $object->getPhone(),
            "cellphone" => $object->getCellphone(),
            "vat_number" => $object->getVatNumber(),
            "lat" => $object->getLat(),
            "lng" => $object->getLng(),
        );

        return $this->getUpdateForm($data);
    }

    /**
     * Creates the creation event with the provided form data
     *
     * @param mixed $formData
     * @return \Thelia\Core\Event\ActionEvent
     */
    protected function getCreationEvent($formData)
    {
        $event = new StoreEvent();

        $event->setVisible($formData["visible"]);
        $event->setTitle($formData["title"]);
        $event->setDescription($formData["description"]);
        $event->setAdminId($formData["admin_id"]);
        $event->setCompany($formData["company"]);
        $event->setFirstname($formData["firstname"]);
        $event->setLastname($formData["lastname"]);
        $event->setAddress1($formData["address1"]);
        $event->setAddress2($formData["address2"]);
        $event->setAddress3($formData["address3"]);
        $event->setZipcode($formData["zipcode"]);
        $event->setCity($formData["city"]);
        $event->setPhone($formData["phone"]);
        $event->setCellphone($formData["cellphone"]);
        $event->setVatNumber($formData["vat_number"]);
        $event->setLat($formData["lat"]);
        $event->setLng($formData["lng"]);

        return $event;
    }

    /**
     * Creates the update event with the provided form data
     *
     * @param mixed $formData
     * @return \Thelia\Core\Event\ActionEvent
     */
    protected function getUpdateEvent($formData)
    {
        $event = new StoreEvent();

        $event->setId($formData["id"]);
        $event->setVisible($formData["visible"]);
        $event->setTitle($formData["title"]);
        $event->setDescription($formData["description"]);
        $event->setAdminId($formData["admin_id"]);
        $event->setCompany($formData["company"]);
        $event->setFirstname($formData["firstname"]);
        $event->setLastname($formData["lastname"]);
        $event->setAddress1($formData["address1"]);
        $event->setAddress2($formData["address2"]);
        $event->setAddress3($formData["address3"]);
        $event->setZipcode($formData["zipcode"]);
        $event->setCity($formData["city"]);
        $event->setPhone($formData["phone"]);
        $event->setCellphone($formData["cellphone"]);
        $event->setVatNumber($formData["vat_number"]);
        $event->setLat($formData["lat"]);
        $event->setLng($formData["lng"]);

        return $event;
    }

    /**
     * Creates the delete event with the provided form data
     */
    protected function getDeleteEvent()
    {
        $event = new StoreEvent();

        $event->setId($this->getRequest()->request->get("store_id"));

        return $event;
    }

    /**
     * Return true if the event contains the object, e.g. the action has updated the object in the event.
     *
     * @param mixed $event
     */
    protected function eventContainsObject($event)
    {
        return null !== $this->getObjectFromEvent($event);
    }

    /**
     * Get the created object from an event.
     *
     * @param mixed $event
     */
    protected function getObjectFromEvent($event)
    {
        return $event->getStore();
    }

    /**
     * Load an existing object from the database
     */
    protected function getExistingObject()
    {
        return StoreQuery::create()
            ->findPk($this->getRequest()->query->get("store_id"))
        ;
    }

    /**
     * Returns the object label form the object event (name, title, etc.)
     *
     * @param mixed $object
     */
    protected function getObjectLabel($object)
    {
        return $object->getTitle();
    }

    /**
     * Returns the object ID from the object
     *
     * @param mixed $object
     */
    protected function getObjectId($object)
    {
        return $object->getId();
    }

    /**
     * Render the main list template
     *
     * @param mixed $currentOrder , if any, null otherwise.
     */
    protected function renderListTemplate($currentOrder)
    {
        $this->getParser()
            ->assign("order", $currentOrder)
        ;

        return $this->render("stores");
    }

    /**
     * Render the edition template
     */
    protected function renderEditionTemplate()
    {
        $this->getParserContext()
            ->set(
                "store_id",
                $this->getRequest()->query->get("store_id")
            )
        ;

        return $this->render("store-edit");
    }

    /**
     * Must return a RedirectResponse instance
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    protected function redirectToEditionTemplate()
    {
        $id = $this->getRequest()->query->get("store_id");

        return new RedirectResponse(
            URL::getInstance()->absoluteUrl(
                "/admin/module/Store/store/edit",
                [
                    "store_id" => $id,
                ]
            )
        );
    }

    /**
     * Must return a RedirectResponse instance
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    protected function redirectToListTemplate()
    {
        return new RedirectResponse(
            URL::getInstance()->absoluteUrl("/admin/module/Store/store")
        );
    }

    protected function createToggleVisibilityEvent()
    {
        return new ToggleVisibilityEvent($this->getRequest()->query->get("store_id"));
    }
    
    protected function createUpdatePositionEvent($positionChangeMode, $positionValue)
    {
        return new UpdatePositionEvent(
            $this->getRequest()->query->get("store_id"),
            $positionChangeMode,
            $positionValue
        );
    }
}
